ip a

sudo nmap -sn 172.20.10.10/28

ssh piteam05@172.20.10.9

rpicam-vid -t 0




















ros2 run imu phidget_spatial_driver --ros-args   -p frame_id:=imu_link -p publish_rate_hz:=100.0   -p accel_in_g:=true -p gyro_in_deg:=true   -p calibrate_gyro_bias:=true -p calib_duration_sec:=3.0   -p publish_mag:=true  


sudo modprobe v4l2loopback devices=1 video_nr=10 card_label="udp-h264" exclusive_caps=1

gst-launch-1.0 -v \
  udpsrc port=5004 caps="application/x-rtp, media=video, encoding-name=H264, payload=96, clock-rate=90000" \
  ! rtpjitterbuffer latency=50 drop-on-latency=true post-drop-messages=true \
  ! rtph264depay ! h264parse ! avdec_h264 ! videoconvert \
  ! video/x-raw,format=YUY2 \
  ! v4l2sink device=/dev/video10 sync=false




ros2 run v4l2_camera v4l2_camera_node --ros-args \
  -p video_device:=/dev/video10 \
  -p image_size:="[640,480]" \
  -p output_encoding:=rgb8 \
  -p camera_name:=pi_cam_3 \
  -r image_raw:=/image_raw \
  -r camera_info:=/camera_info


To screen record on Ubuntu, use the built-in screenshot tool by pressing Ctrl+Alt+Shift+R


cat <<'SDP' | ffplay -fflags nobuffer -flags low_delay -probesize 32 -analyzeduration 0 \
  -protocol_whitelist file,udp,rtp,pipe -i -
v=0
o=- 0 0 IN IP4 0.0.0.0
s=Pi H264
c=IN IP4 0.0.0.0
t=0 0
m=video 5004 RTP/AVP 96
a=rtpmap:96 H264/90000
a=fmtp:96 packetization-mode=1
SDP



  ('Wrote calibration data to', '/tmp/calibrationdata.tar.gz')
D = [0.1627322996688074, -0.1650145768687133, 0.008211182076061706, -0.028930870037189266, 0.0]
K = [1094.1702034248997, 0.0, 256.58643563910624, 0.0, 1073.7275377871583, 269.55756594188125, 0.0, 0.0, 1.0]
R = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]
P = [1103.901123046875, 0.0, 248.86611259701385, 0.0, 0.0, 1099.7266845703125, 270.3081033018516, 0.0, 0.0, 0.0, 1.0, 0.0]
# oST version 5.0 parameters


[image]

width
640

height
480

[narrow_stereo]

camera matrix
1094.170203 0.000000 256.586436
0.000000 1073.727538 269.557566
0.000000 0.000000 1.000000

distortion
0.162732 -0.165015 0.008211 -0.028931 0.000000

rectification
1.000000 0.000000 0.000000
0.000000 1.000000 0.000000
0.000000 0.000000 1.000000

projection
1103.901123 0.000000 248.866113 0.000000
0.000000 1099.726685 270.308103 0.000000
0.000000 0.000000 1.000000 0.000000



/home/ivans/pi_cam_callibration/calibrationdata/pi_cam_3.yaml


#to run my own octomap and pointcloud launches
ros2 launch cf3d_nav cf3d_nav_full.launch.py

#---------------------------------------------------------------------------------------------------------------
# for v4l2 canera node

    slam_node = Node(
        package='orbslam3_ros2',
        executable=LaunchConfiguration('camera_type'),  # Get the executable based on camera type
        output='screen',
        parameters=[
            {"vocab_path": vocab_file},
            {"config_path": settings_file},
        ],
        remappings=[
        ('/camera/rgb/image_color', '/image_raw')  # <-- this does the trick
    	]
    )


    # Octomap Server Node (SAGAR) (only launch if start_octomap is true)
    octomap_server_node = ExecuteProcess(
        cmd=['ros2', 'run', 'octomap_server', 'octomap_server_node', '--ros-args', '--remap', 'cloud_in:=/slam/pointcloud', '-p','resolution:=0.05'],
        condition=IfCondition(LaunchConfiguration("start_octomap")),
        # condition=lambda context: context.launch_configurations['start_octomap'] == 'true'
    )

        return LaunchDescription([
        record_bag_arg,
        start_octomap,
        visualize_arg,
        camera_type_arg,
        slam_node,
        bag_record_process,
        OpaqueFunction(function=launch_rviz2),
        octomap_server_node
    ])
#---------------------------------------------------------------------------------------------------------------


 

ros2 run image_tools cam2image --ros-args -p device_id:=0 -p width:=640 -p height:=480 --remap image:=/camera/rgb/image_color -p freq:=7.0